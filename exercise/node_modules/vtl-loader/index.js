'use strict';

var fs = require('fs');
var path = require('path');
var loaderUtils = require("loader-utils");

module.exports = function (fileContent) {

    var query = loaderUtils.parseQuery(this.query);

    return "module.exports = " + replaceSrc(JSON.stringify(fileContent), query.exclude);
};


function replaceSrc(fileContent, exclude) {
    fileContent = fileContent.replace(
        /((\<img[^\<\>]*? (?:data\-src|src))|(\<link[^\<\>]*? href))=\\?[\"\']?[^\'\"\<\>\+]+?\\?[\'\"][^\<\>]*?\>/ig,
        function (str) {
            var reg = /((src)|(href))=\\?[\'\"][^\"\']+\\?[\'\"]/i;
            var regResult = reg.exec(str);
            if (!regResult) return str;
            var attrName = /\w+=/.exec(regResult[0])[0].replace('=', '');
            var imgUrl = regResult[0].replace(attrName + '=', '').replace(/[\\\'\"]/g, '');
            if (!imgUrl) return str; // 避免空src引起编译失败
            if (/^(http(s?):)?\/\//.test(imgUrl)) return str; // 绝对路径的图片不处理
            if (!/\.(jpg|jpeg|png|gif|svg|webp)/i.test(imgUrl)) return str; // 非静态图片不处理
            if (exclude && imgUrl.indexOf(exclude) != -1) return str; // 不处理被排除的
            if ((/^\#if/).test(imgUrl)) {
                 return str;
            }
            if ((/\$[\!\{]?/ig).test(imgUrl)) {
                return str
            }
            if (!(/^[\.\/]/).test(imgUrl)) {
                imgUrl = './' + imgUrl;
            } else if (/^\/module\//.test(imgUrl)) { // 兼容mdev写法
                imgUrl = '../..' + imgUrl;
            }

            return str.replace(reg, attrName + "=\"+JSON.stringify(require(" + JSON.stringify(
                imgUrl) + "))+\"");
        });
    return fileContent;
}
